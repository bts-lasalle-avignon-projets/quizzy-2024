class VueSession
!!!218290.java!!!	onCreate(inout savedInstanceState : Bundle) : void
        super.onCreate(savedInstanceState);
        EdgeToEdge.enable(this);
        setContentView(R.layout.activite_session);
        ViewCompat.setOnApplyWindowInsetsListener(findViewById(R.id.main), (v, insets) -> {
            Insets systemBars = insets.getInsets(WindowInsetsCompat.Type.systemBars());
            v.setPadding(systemBars.left, systemBars.top, systemBars.right, systemBars.bottom);
            return insets;
        });

        Objects.requireNonNull(getSupportActionBar()).hide();

        IHM.getIHM().ajouterIHM(this);

        listeParticipants = new ListViewParticipants(this, R.id.liste_participants);
        listeEcrans = new ListViewEcran(this, R.id.liste_ecrans);

        setSession(Parametres.getParametres().getSession());

        question = findViewById(R.id.question);
        propositions = new TextView[4];
        propositions[0] = findViewById(R.id.proposition1);
        propositions[1] = findViewById(R.id.proposition2);
        propositions[2] = findViewById(R.id.proposition3);
        propositions[3] = findViewById(R.id.proposition4);
        chronometre = findViewById(R.id.chronometre);
        progression = findViewById(R.id.progression);
        btn_stopper = findViewById(R.id.btn_stopper);
        btn_pause = findViewById(R.id.btn_pause);
        btn_reinitialiser = findViewById(R.id.btn_reinitialiser);
        btn_suivant = findViewById(R.id.btn_suivant);
        btn_precedent = findViewById(R.id.btn_precedent);

        btn_suivant.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                session.suivant();
            }
        });

        btn_precedent.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                session.precedent();
            }
        });

        btn_stopper.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                session.stopper();
            }
        });

        btn_pause.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                if (session.getEtape() == EtapeSession.MARCHE) {
                    session.pause();
                } else if (session.getEtape() == EtapeSession.PAUSE) {
                    session.reprendre();
                }
                afficherBoutons();
            }
        });

        boolean estRecree = getIntent() == null || getIntent().getExtras() == null || getIntent().getExtras().getBoolean("estRecree", true);
        if (!estRecree) {
            getIntent().removeExtra("estRecree");
            session.lancer();
        } else {
            afficherInterface();
        }
!!!218418.java!!!	onRestart() : void
        super.onRestart();
        IHM.getIHM().ajouterIHM(this);
!!!218546.java!!!	mettreAjourListeParticipants() : void
        listeParticipants.mettreAjour();
        listeEcrans.mettreAjour();
!!!218674.java!!!	afficherInterface() : void
        Question question = session.getQuestionActuelle();
        this.question.setText(question.getQuestion());
        for (int i = 0; i < propositions.length; i++) {
            propositions[i].setText(session.getQuestionActuelle().getPropositions().get(i));
            if (session.getEtape() == EtapeSession.PAUSE_FIN_QUESTION) {
                if (question.getNumeroBonneReponse() - 1 == i) {
                    propositions[i].setBackgroundResource(R.drawable.proposition_vraie);
                } else if (question.estSelectionnee(i)) {
                    propositions[i].setBackgroundResource(R.drawable.proposition_selectionee);
                } else {
                    propositions[i].setBackgroundResource(R.drawable.proposition);
                }
            } else {
                if (question.estSelectionnee(i)) {
                    propositions[i].setBackgroundResource(R.drawable.proposition_selectionee);
                } else {
                    propositions[i].setBackgroundResource(R.drawable.proposition);
                }
            }
        }
        afficherChrono();
        progression.setText(session.getNumeroQuestion() + "/" + session.getTotalQuestions());
        afficherBoutons();
        mettreAjourListeParticipants();
!!!218802.java!!!	afficherBoutons() : void
        btn_precedent.setEnabled(session.getNumeroQuestion() != 1 && session.getEtape() != EtapeSession.PAUSE);
        btn_suivant.setEnabled(session.getNumeroQuestion() != session.getTotalQuestions() && session.getEtape() != EtapeSession.PAUSE);
        btn_pause.setEnabled(session.getEtape() == EtapeSession.MARCHE || session.getEtape() == EtapeSession.PAUSE);
        btn_pause.setText(session.getEtape() == EtapeSession.PAUSE ? "Reprendre" : "Pause");
!!!218930.java!!!	afficherChrono() : void
        if (session.getEtape() == EtapeSession.ARRET) {
            return;
        }
        double tempsRestant = Parametres.getParametres().getSession().getTempsRestant();
        chronometre.setText(format.format(tempsRestant).replace(',', '.'));
        if (tempsRestant == 0.0) {
            chronometre.setTextColor(Color.RED);
        } else if (tempsRestant < 3.0) {
            chronometre.setTextColor(Color.YELLOW);
        } else {
            chronometre.setTextColor(getResources().getColor(R.color.white));
        }
!!!219058.java!!!	setSession(inout session : Session) : void
        this.session = session;
